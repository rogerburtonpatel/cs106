#!/bin/bash

# does differentiable testing on a file: runs it through the uft wash, 
# translating it a level down each time and running vscheme. 
# if there's a break, it tells you when. 

# Usage: differentiate-106 

SCHEMEFILE=""
QUIET=0
FILETYPE=".scm"
order=("ho" "cl" "kn")

usage ()
{
        echo "Usage: $0 scheme-file.[scm|ho] [-q]"
        exit 1

}

run ()
{
    while (( $# > 0 )); do
        case $1 in 
            -"q") QUIET=1 ; shift ;;
            *".scm") shift ;;
            *)   usage ; break ;;
        esac
    done

    if $(grep -q "check-expect" $SCHEMEFILE); then 
        >&2 echo -en "\033[31mWARNING!!!\033[0m "
        >&2 echo     "Your target file contains \"check-expect\", "
        >&2 echo     "which uft-ho-kn turns into \"check\" and \"expect\", "
        >&2 echo     "which aren't recognized by vscheme."
        >&2 echo     "I'll skip translation to kn for now."
        order=("ho" "cl")
    fi

    canonical_out=$(vscheme "$SCHEMEFILE" 2>&1)

    for ((i=0; i<${#order[@]}; i++))
    do
        for ((j=i; j<${#order[@]}; j++))
        do
            translation="${order[i]}-${order[j]}"
            my_out=$(uft $translation $SCHEMEFILE | vscheme 2>&1)
            difference=$(diff <(echo "$canonical_out") <(echo "$my_out") 2>&1)
            if [[ "$?" -ne 0 ]]; then 
                >&2 echo "DIFFERENCE IN \"uft $translation\":\n $difference"
                exit 1
            else 
                echo -n "\"uft $translation `basename $SCHEMEFILE` | "
                echo    "vscheme 2>&1\" passed the diff against vscheme output."
            fi        
        done
    done

    my_out=$(uft "ho-vo" $SCHEMEFILE | svm 2>&1)
    difference=$(diff <(echo "$canonical_out") <(echo "$my_out") 2>&1)
    if [[ "$?" -ne 0 ]]; then 
        >&2 echo "DIFFERENCE IN \"uft ho-vo \":\n $difference"
        exit 1
    else 
        echo -n "\"uft "ho-vo" `basename $SCHEMEFILE` | svm     2>&1\""
        echo    " passed the diff against vscheme output." 
    fi
}

main ()
{
    SCHEMEFILE="$1"
    if [ $QUIET ]; then 
        run $@ &> /dev/null
    else 
        run $@ >"$OUT"
        echo "You survived the wash!"
    fi
}


main $@
