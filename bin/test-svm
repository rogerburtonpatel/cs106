#!/bin/bash

# shellcheck disable=SC2086

function die {
  echo "$*" >&2
  exit 2
}

arg0=$(basename "$0")

if [[ $# -eq 0 ]]; then
  base=$(basename $0)
  echo "Usage: $base [-v [-v]] [-bin directory] *.scm *.es
    or find . -name '*.scm' -exec $base [-v [-v]] [-bin directory] '{}' ';'
         where -v      shows more info
               -v -v   shows even more info
               -bin    says where uft and svm are located

       A test comprises these files:
         *.scm          vScheme source
         *.es           eScheme source
         *.1            Output expected on standard output, if any
         *.2            Output expected on standard error, if any
         *.argv         Arguments to be passed in global variable argv, if any
         *.x            Expected exit status if different from zero"
  exit 1
fi


output=$(mktemp)

predefvo=$(mktemp)

testout=$(mktemp)
testerr=$(mktemp)
testexit=$(mktemp)
ufterr=$(mktemp)
vo=$(mktemp)

trap "rm -f $output $predefvo $testout $testerr" 0 1 2 3 6 9  # not sure if /bin/sh supports...

verbose=

while [[ $# -gt 0 ]]; do
  case $1 in
    -bin) if [[ -x "$2"/svm && -x "$2/uft" ]]; then
            PATH=$2:$PATH ; shift 2
          else
            die "Directory $2 is missing either svm or uft"
          fi
          ;;
    -v) verbose="$verbose"yes ; shift ;;
    -es) scmtx="es-vo" ; shift ;;
    -*) die "unknown option" ;;
    *) break ;;
  esac
done

vscheme -predef | uft ho-vo > $predefvo

failure=
rc=0


function passes {
  if [[ "$verbose" = yesyes* ]]; then echo "$1 passes $2"; fi
}

function fails {
  if [[ -n "$verbose" && -z "$failure" ]]; then echo "$1" fails "$2"; fi
  if [[ -z "$failure" ]]; then
    failure="$2"
  fi
  if [[ $rc -lt 2 ]]; then rc=2; fi
}

function check_stdout {
  if [[ -r "$2" ]]; then
    if cmp -s "$2" "$3"; then
      passes $1 stdout
    else
      fails $1 stdout
      if [[ "$verbose" = yesyes* && "$failure" = stdout ]]; then
        echo "Expected on stdout:"
        cat "$2"
        echo "Seen on stdout:"
        cat "$3"
        echo "----------------------------"
      fi
    fi
  else
    typeset stdout="$(cat "$3")"
    if [[ -n "$stdout" ]]; then
      case "$(cat $3)" in
        The?only?test?passed.|Both?tests?passed.|All*tests?passed.) passes $1 stdout ;;
        *) fails $1 stdout 
           if [[ "$verbose" = yesyes* ]]; then
             cat "$3"
             echo "------------------------"
           fi
           ;;
      esac
    fi
  fi

}

function check_stderr {
  if [[ -r "$2" ]]; then
    if cmp -s "$2" "$3"; then
      passes $1 stderr
    else
      fails $1 stderr
    fi
  elif [[ x"$(cat $3)" != x ]]; then
    fails $1 stderr
    if [[ -n "$verbose" && "$failure" = stderr ]]; then cat $3; fi
  fi
}

function check_exit {
  typeset expected=0
  if [[ -r "$2" ]]; then expected="$(cat "$2")"; fi
  typeset seen="$(cat "$3")"

  if [[ "$seen" != "$expected" ]]; then
    if [[ -z "$failure" &&  -n "$verbose" ]]; then
      echo "$1 expected to exit $expected but exits $seen"
    fi
    fails "$1" "exit code"
  fi
}

function large_object_failure  {
  typeset testerr="$(cat "$1")"
  if [[ "$testerr" = Large-object?allocator?not?implemented* ]]; then
    return 0
  else
    return 1
  fi
}

      


for i
do
  base=${i%.scm}
  base=${base%.es}
  argv=$base.argv
  stdout=$base.1
  stderr=$base.2
  exit=$base.x
  failure=

  case $i in
    *.scm) lang=ho-vo ;;
    *.es)  lang=es-vo ;;
    *) die "$arg0: I don't know how to run test file '$i'" ;;
  esac

  command=(svm $predefvo -)
  if [[ -r $argv ]]; then
    command+=(-- $(cat $argv) )
  fi

  if [[ "$verbose" = yesyes* ]]; then
    echo "Running test $i"
  fi

  uft $lang "$i" > $vo 2>$ufterr
  uftexit=$?

  if [[ $uftexit -ne 0 ]]; then
     fails "$i" uft
     if [[ -n "$verbose" ]]; then
       cat $ufterr
     fi
  elif ! cmp -s $ufterr /dev/null; then
     fails "$i" uft
     if [[ -n "$verbose" ]]; then
       cat $ufterr
     fi
  else
    ( "${command[@]}" < $vo > $testout 2>$testerr
       echo "$?" > $testexit
    ) 2> /dev/null

    if large_object_failure $testerr; then
      echo "$i cannot be run: heap pages aren't big enough"
      if [[ $rc -eq 0 ]]; then rc=1 ; fi
    else
      check_stderr $i $stderr $testerr
      check_stdout $i $stdout $testout
      check_exit $i $exit $testexit
    fi
  fi

  if [[ -n "$failure" && -z "$verbose" ]]; then
    echo "$i failed $failure"
  fi
done

exit $rc
