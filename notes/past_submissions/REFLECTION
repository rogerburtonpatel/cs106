Project points:

1. Submitted
2. Submitted
3. Language: Python

Literal types:

String Literals:
    Could be expressed as <literal> in virtual object code. 
Numeric Literals:
    SOME could be expressed as <literal> in virtual object code using various
    numeric types. But Python uses BigNums, and we might need multiple 
    instructions to code for these depending on implementation. Certainly,
    we would need a new instruction that describes the behavior of how to 
    allocate for and read in bignums (if using an array, for example).
Boolean Literals:
    Could be expressed as <literal> in virtual object code using true | false. 
Special Literals: ("None")
    Could be expressed as <literal> in virtual object code using nil.
Literal Collections:
    Could not be expressed as <literal> in virtual object code, since 
    lists, sets, dicts, tuples, etc. can be instantiated with members, and
    no <literal> describes a container along with its (potentially numerous)
    contents. Multiple instructions may be needed to allocate a container
    and fill its contents. 

4.  If you were able to compile Python to virtual object code, then 
    I could reuse the loader: I believe that each type could be encoded, if
    perhaps in multiple instructions, with a single line that can be 
    tokenized and parsed into a single 32-bit machine word. I would have to
    expand the instruction table significantly, but could keep its general
    form.

5. Properties my implementation has: 
    - There is no wasted space
    - Implementing literal_slot was quick and easy

    This was something I thought a lot about. Norman's use of a hard-coded
    array had me thinking about tradeoffs, and I went seeking some answers. 
    This video https://youtu.be/o4-zpAI7qBc unlocked some new ideas. The idea
    is that Big-O describes behavior as input sizes approach infinity; for 
    small inputs, it really isn't the foremost factor in determining runtime. 
    Even though literal_slot is an O(n) algorithm in my implementation 
    and other implementations have the potential for O(1) with a table,
    for an input size of 65k or less, I think the overhead of allocating
    a hash table, hashing values, and resolving collisions would be 
    unnoticablly faster (if at all) from a linear search. Futhermore,
    linear storage is much easier to implement, debug, and garbage-collect. 

    As such, I implemented my literal pool (and global lookup structure) as 
    linear C arrays, and perform a search to avoid duplicates. I decided
    I'm more worried about my table filling up with redundant values 
    than having to wait to search for them, especially since common literals 
    (0, 1, #t, #f, '(), and so forth) would likely be placed very early on 
    in the array, making search time especially fast. 

6. In iparsers.c:get_literal, on line 123, the parser extracts the token
   type. On lines 125-148, the parser makes a decision based on the type;
   in the if-else tree, the parser is choosing which literal form it thinks
   it's been given. For example, on lines 127, 129, 131, 133, and 135, 
   the parser is recognizing a name and potentially choosing a Value 
   representation for booleans, nil, emptylist, and string. 
   On lines 144-148, the parser is deciding it has found a Number. 


7. 
In virtual machine code, every instruction must be of the same length in terms
of number of bits; e.g. an instruction that only uses one register must still
have the excess bits besides the opcode and register address. In the virtual
object code, only the used registers need be specified on a line. For example,
"not 1" is a valid line in virtual object code, but a virtual machine
instruction must contain 
[opcode not] + [register 1] + [16 junk bits]. 

8. All 6 forms of literal can be embedded from vo code to Values. On lines 
   128, 130, 132, 134, 142, 145, and 148, we demonstrate the ability to embed
   the tokens obtained from the machine code (the tokens being generated in
   loader.c). Note that we can't STORE the Values without the vmstate, but we
   can embed the object code to Value types just fine without it. 
   Effectively, on iparsers.c:99, we complete embedding of a .vo <literal>
   to a Value, and on iparsers.c:100, we store that literal, which needs the
   vmstate. So, their embedding and storage is distinct, and embedding does
   not require the state. 

9. The LoadLiteral instruction could not be projected without a vmstate, 
   since we need to call literal_slot (which requires the state) in order
   to comfortably seat the literal at load time. Similarly, Check and Expect
   also use parseR1LIT, which calls literal_slot; ergo, these need vmstate. 
   When I add instructions GetGlobal and SetGlobal, they will also need the 
   state for global_slot. All others can be projected to virtual object code 
   without the vmstate. The thing they have in common is that the only operate
   on registers, and don't need direct access to the literal pool to be formed.

10. 
loader.c:101 and iparsers.c:100 are calls to literal_slot, which will return
the slot of the requested literal, updating the pool as needed. The
(potentially) updated pool L', is guaranteed to contain the literal v at 
returned location v. This is enforced on lines vmstate.c:57-62, which return the
slot of the literal if it exists or create a new slot and return its location.
Therefore, in the 'next-state' literal pool L', 
the value v is (nondeterministically) guaranteed to be in the literal pool L'
at location k: 
L'(k) = v. 

Similarly, updating the literal pool can never alter values other than the one
being added; as such, L ⊆ L'. This is also enforced on lines vmstate.c:57-62, 
which can only write to the num_literals'th position, and this is guaranteed
by the invariant to never hold a valid literal before it is written to.
As such, the literal pool can only grow between state transitions through calls
to literal_slot, and we can assert that in all such transitions that L ⊆ L'.

Depth pt. 11:

I used ChatGPT to generate an if-else tree from a switch statement (since I was
switching on a pointer). This tree is found in iparsers.c:125-148. 
To effectively prompt it (I wanted nothing changed except to go from switch 
to if-else), I asked ChatGPT to 
"change the following code block in C from a switch statement to an if-else
 tree, changing nothing except the conditional logic"

And it did so very well: the tree was valid, compiled, and produced the correct
result. However, it was badly indented. To effectively prompt good indentation,
I asked:
"give me the same code, but with the body of each for loop and if, else if, 
or else statement indented by four space characters, with nesting."
(I wanted to be very specific so it got it right!)

It gave me a very good tree, with only one issue: the function body
was indented by two spaces! I asked it:

"give me the exact same code, but change the indentation of this function's
body to be four space characters from the margin."

It gave me the exact desired output. One thing it did well was chaining commands
referencing each other and honoring the invariant of never changing any of the
items I asked it not to touch. 


Depth pt. 13:

In order to take in string literals, we would need to add a function

const char *tokens_get_string(Tokens *p, const char *original); 

With the contract:

tokens_get_string accepts a tokenized C string from the token stream and 
returns the literal C string. 

This would assume that strings were able to be tokenized by the tokens()
function; however, this change would not affect the interface. 

