Submitted code with a token and reflection after midnight of April 11 with 
same token. Thanks so much!

1. To claim this point, give an example definition that contains a lambda whose
body includes at least one name in each of these of these categories: a
primitive, a global name that does not refer to a primitive, a local name, and a
captured name. In your answer, identify one name from your example in each
category.

> (define stupid-hof-fst (x) (lambda (y) (if (function? map) x y)))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    primitive: function?
    global: map
    local to inner lambda: y
    captured in inner lambda: x

2. To claim this point, identify the lines of your code that determine what
variables are captured by a closures, and explain why these variables never
include a global variable—even though according to the proof system, global
variables are technically “free.”

> closure-convert.sml:80 builds the list of captured names by grabbing the 
  free variables of the lambda (all interior free names, minus its arguments).
  the `free` function, defined at closure-convert.sml:32-58, doesn't 
  identify global variables as free because it doesn't want them to be 
  part of this list of captured names. We want to look up global variables
  with our `getglobal` conventions, and captured variables using 
  CAPTURED-IN. Because globals are stored in a lookup table (lies; it's a list)
  at runtime, we want to only refer to them using our `getglobal`/`setglobal`
  API, and not muddle them with names we're capturing. It would be a 
  waste of space in our VMClosure, and make our low-level code much harder
  to read. 

  J to make sure I'm answering this correctly: we (only) identify X.LOCAL and 
  X.SETLOCAL names to be free, at closure-convert.sml:37, 39. 

3. To claim this point, identify the lines of source code in your UFT where
closures and captured variables are embedded into ordinary vScheme.

> clscheme.sml:55-61. We use the literal "$closure" and "CAPTURED-IN" syntax
  of our closure-converted code to embed the results for our prettyprinter.
  vscheme recognizes these constructs, and the semantics don't change. 
  (Thanks for doing letrec!)

4. To claim this point, identify the lines of code in your vmrun.c that 
correspond to the CAPTURED-IN function that is predefined in vScheme.

> vmrun.c:536-549. We use instructions GetClSlot and SetClSlot to talk about 
  indexed captured variables in the same way as CAPTURED-IN i $closure:
  cl->captured is $closure, UZ is i, and if a result is returned by GetClSlot
  it's put in registers[UX].

5. To claim this point, identify the lines of code in your K-normalizer that
K-normalize a closure, and explain how the code keeps track of which variable is
in what register both where the closure is allocated and inside the closure.

> knormalize.sml:149-152. 
knormalize.sml:176-183 do the heavy lifting of binding the argument variables
to registers with helper `funcode`. This function accumulates boundEnv with 
the bindings and subtracts the used registers from availRegs (these are 
consecutive registers so DEFINE works.) 
nbRegs with bindAnyReg in the K.CLOSURE tranlation gives us the bindings 
for the captured variables. These regs are used in the final K.CLOSURE:
we keep track of the var-register relationships of the overall closure 
closure allocation by binding the whole thing with bindAnyReg using regset
A, which holds the available registers. We bind the internals of `captured`
with the rest of the work done by nbRegs' use of bindAnyReg, passing the
newly-used registers to the K.CLOSURE as its captured list. Finally, we 
normalize and bind within the body as discussed above in `funcode`. 
The mini-orchestra makes sure there aren't clashes where registers bound
and `local` to one instance aren't being referenced before being re-bound
in another. 

6. Suppose that something goes wrong in your closure conversion and that not all
captured variables are properly identified. (Perhaps there is a bug in the free
function and it overlooks a free variable.) To claim this point, identify the
line of code in your K-normalizer where the compiler would fail, and explain how
the failure would manifest.

> When we make our list of captured names while closure-converting 
  at closure-convert.sml:80, we won't have all the free names in our lambda
  body. When we call closeExp at :81, we'll got through the motions of `exp`, 
  but when we find a local variable that's free, it might not be in the
  capturedNames list we passed to closeExp. This will lead to a failure 
  in the case statement at closure-convert.sml:89-91: we won't replace the
  local variable with a C.CAPTURED i, and just keep talking about it as a name.
  As we move down the line in our translation, our knormalizer will attempt to
  translate that local name into a register at knormalize.sml:116-119, 
  and will either fail in its Env.find with a checked run-time error in the uft
  or (I managed to get it to do this by making free X.LOCAL n return S.empty)
  just erroneously bind to a register if the variable shares a name with an 
  actual local variable in scope. This will lead to undefined behavior in 
  the SVM; we'll have use of bad local variables where there should be use
  of captured variables. 

7. Imagine that the detector in Mutability.detect doesn’t work—it always returns
Error.OK applied to its argument, regardless of whether there are bad mutations
in the source code. Assuming that there are bad mutations in the source code, if
the detector doesn’t work, the compiler will fail downstream. To claim this
point, identify the line in your source code where the failure should occur.

> If we do a bad mutation (i.e. write to a captured variable), our compiler 
  will fail at closure-convert.sml:93-96 (specfically 95/96 as the fail case).
  We'll see that the variable is indeed captured in `capture` list, and 
  closure conversion will scream and stop. 

Side note: this helped me find ANOTHER S.diff bug in my knormalizer! 
this test was failing:

echo "(lambda (y) (let ([z 1]) (+ 1 2)))" | uft ho-kn

with NameNotFound: z

Because I had
S.union' (S.diff (S.ofList names, free body)::freeSets rhss)
in my free X.LETX case 
instead of 
S.union' (S.diff (free body, S.ofList names)::freeSets rhss), 

ho-cl was giving: 
(mkclosure (lambda ($closure y) (let ([z 1]) (+ 1 2))) (cons z '())), 

and here z is just out of scope. Basically, the semantics were just wrong:
I was saying let-bound names ARE free, and those in the body aren't. 
Not what I meant, but apparently I have a long, long way to go with 
Set difference.

8. To claim this point, identify the lines of code in your K-normalizer that 
build the environment used to compile all the right-hand sides and the body of a
LETREC.

> knormalize.sml:154-157. We first allocate a register for each binding on :154,
  then extend the environment `rho` with a ListPair.foldr of Env.bind 
  over the list of bound names and registers. It's with this environment (and
  the updated set of available registers, A') that we consider our register 
  bindings when binding in the right-hand sides and body of the letrec. 

99. If your submission for module 9 did not alias variables, you have already 
earned the bonus point. Otherwise, to claim the bonus point, correct any unsafe
aliasing that your K-normalizer may have done, and invent a new, original test
case that shows the difference.

Correction: I changed knormalize.sml:144 to not use bindAnyReg, but rather
bindSmallest to make its bindings. This means that yes, we'll have wasteful
re-bindings of registers when we bind new registers to hold the values of 
our local names, which are already in registers. But we pass the test in 
mut-test.scm, which I've just put as part of my resubmission. 

Here's the test:

(define mutate-local (x)
   (let ([bad x])
     (begin (set bad 5)
            x)))
(check-expect (mutate-local 1) 1)

why it's different: if we `(set bad 5)` and we're using bindAnyReg, 
we're going to have first eliminated the binding of bad to x and just have
`(set x 5)` instead (on the register level). We don't want this. 