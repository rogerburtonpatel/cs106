CS 106 Homework Submission

What person or group is submitting this homework?

  - Roger, with help from Stephanie and Vivian! Thank you! 

What work are you proud of?

  - Reverse-implementing the instructions given by the ML code in C (i.e. +imm,
  swap, etc). Generally, keeping the SVM sharp while the rest of the project
  grows. 

What code would you like help improving?  Are there bugs you'd like
help finding during code review?

  - How to load a literal into a register: I need to parse a literal (did we
    already learn how to do that?) This is in one_line_instr, at 
    asmparse.sml:186
  
  Also, thinking about labels: I get the concept, but need to figure out HOW to 
    use the DEFLABEL construct. Also, generally talking about parsing and 
    unparsing in terms of the lower-level VM global table. No particular lines
    of code for this, just concepts this time. 


What code, if any, would you especially like the course staff to
review?  Why?

  - Looking at unparse in asmparse.sml:303-310 and seeing if these usages
    of list map with indentation make sense for a legible and efficient 
    implementation. Same as above: What do I need to add to parse literals for
     one_line_instr, at asmparse.sml:186-- is literal parsing (using a function
     like 'reg') something we need to write, or did we do this already?

In this course, all code may be shared freely.  Aside from code that
is distributed with the assignment, does your submission contain any
other code that you got from someone else?  If so, what code is it
(file names and line numbers please) and who supplied it?

  - I talked extensively with Stephanie about concepts as we were working 
    through unparse1 and unparse. She also helped me with some parenthesization
    on asmparse.sml:304, 308. 

In response to last week's code review, have you made any material
changes?  What were they?  By file name and line number, where are
they found in the code?  If you remember, who helped you during code
review?

  - I added new instructions in instructions.c:35-37, changed names from 
  "add", "sub" etc to "+", "-" etc in instructions.c:22-26. I added 
  implementations for these in vmrun.c:157-171, and opcodes in opcode.h:20-22.
  Weishi and Norman helped me during code review. 


We have a plenary code review tomorrow.  Are you willing to present
(as a group, if applicable)?

  - Yes

Supposing you are not selected to present at tomorrow's plenary code
review, what code would you like to see presented?  What would you
learn the most from?

  - Looking at code for lists: parsing cons cell abstractions. Also, 
  if anyone did check-expect as a single line. 

Again supposing you are not selected to present, who in your group is
willing to serve on the review panel?

  - n/a

Thanks so much! Good to be back in ML land, 
drinking from the functional kool-aid (which has no side effects)