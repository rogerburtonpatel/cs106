1. To claim this point, submit source code that compiles and builds a uft 
binary that understands what fo-kn is asking for.

> you bet

2. To claim this point, identify a line of your code that contains a 
continuation passed to bindAnyReg, bindSmallest, or a similar function, 
and explain how the continuation reserves the allocated register to prevent 
its reuse.

> knormalize.sml:132, at the translation of F.FUNCALL. Here, we remove reg,
  the argument to the continuation, from the available set of registers 
  with (A -- reg), so that it can't be reused later in the translation of es.

3. To claim this point, identify a line of your code that contains a 
continuation passed to bindAnyReg, bindSmallest, or a similar function, and 
explain how the continuation does not reserve the allocated register but rather 
allows its immediate reuse.

> knormalize.sml:125, at the translation of F.IF. Here, we use A in the IF 
  branches even after calling bindWithTranslateExp on the condition of the if 
  (the function is a wrapper for bindAnyReg.) This is because once we make the
  condition's register binding and evaluate it, we're not coming back to
  the condition and are only going to one branch, so the same set of registers
  is safe to use. 

4. To claim this point, identify (by line number) every case in your 
K‑normalizer that binds a list of expressions to a list of registers, and 
confirm that each case uses the same higher-order function.

> knormalize.sml:106 (F.PRIMCALL and also our class!), 132 (F.FUNCALL), 
                 138 (F.LET). The function is nbRegsWith, partially applied 
                 to make nbRegs. 

5. To claim this point, identify the lines of your code where it is determined 
that a function’s incoming actual parameters are in consecutive registers 
starting at register 1.

> knormalize.sml:174-177, at F.DEFINE. Here, we fold over the names, binding 
  each to a reg in the environment. We start at register 1, as indicated by 
  the '1' on line 176- the register is part of the accumulator that's useful
  during the fold and discarded after we've created the environment. (i've 
  updated the code to bind the result to a tuple and not use the cursed #1, #2
  convention.)

6. To claim this point, submit a file kntest.scm in which every value 
constructor in foscheme.sml, for both exp and def types, is exercised by some 
test. Each test must be documented by a comment that names the value 
constructor or value constructors that it tests. And uft fo-kn kntest.scm must 
actually generate code. (It is not necessary for the generated code to run or 
for all the tests to pass.)

> submitted. 

7. Suppose we change the calling convention so that the function register and 
argument registers are not killed by a call. Instead they are required to have
the same values after the return that they had at the call. With this change, 
it becomes very difficult to use the tailcall instruction except for direct 
recursion. And other changes, unrelated to tail calls, might also be required
in the UFT. To claim this point, identify such required change, either in the
K-normalizer or in the code generator.

> In codegen.sml, instead of returing to register 0, we'll return to 
  register (nargs), where nargs is the number of registers used. This way, 
  if we call a function in r0 with args r1, r2, r3, we'll put our 
  return value in r4, and not overwrite r0. We're not able to overwrite the 
  arguments by calling a function via scheme code generation: you can 
  screw it up in assembly, but the uft won't let you make a function that 
  changes the values of its arguments because of register window shifts. 
  
  The change would be in codegen.sml:100, 122, where instead of calling from 
  dest or r, we'd call from (List.length r::rs). 

  We discussed this question a lot, and weren't able to come up with examples
  where a function call would change the registers used to call it such that 
  the following code couldn't use the old values (except, of course, for r0).
  Hopefully we're on the right track with this one. 

8. To earn this point, your system must run and pass all the tests in 
scheme105.scm. To claim the point, let us know that you accomplished this goal, 
and in the reflection, tell us how many tests are included in the file. 
If anything went wrong in your first run of step 25, let us know one thing that 
went wrong and how you fixed it.

> It immediatly broke when I ran it, because the higher-order stuff doesn't
work yet (no lambda/closures). So I commented those out and ran again. 2 issues
and we were through:

   1. Cons cell bug: I was type checking for homogeneous lists. Oops. 
   2. Bug in tailcall: getting function from registers[0]
      instead of registers[r0]. Hard to find. I fixed it by using fprintfunname
      in every call/tailcall instance in vmrun.c, along with SVMDEBUG=decode.
      Finally found it when tailcall r2 printed the function in r0. 

There are 27 tests in the file. 

9. To claim this point, justify your choice of policy for K‑normalizing a let 
expression in step 23. Justification should include an explanation of why 
another policy is inferior and should be demonstrated with a code example.

> I use bindAnyReg, because I don't want redundant bindings to names we already
  have. This reduces the code significantly: see this test --

 (define localLetStar (n m)
    (let* ([n m] [m n]) (+ n m)))
(check-expect (localLetStar 1 2) 4)

With bindSmallest, we get TWO EXTRA BINDINGS: 

(let ([r0 (lambda (r1 r2) 
             (let* ([r3 r2]
                    [r4 r1]) 
               (+ r3 r4)))]) 
  (set localLet r0))

  to r3 and r4. But with bindAnyReg:

  (let ([r0 (lambda (r1 r2) (+ r2 r1))]) (set localLet r0))

  So clean. And reducing redundant instructions actually concretely increases
  performance- not to meantion readability of assembly with fewer redundant
  bindings. 


RESUBMITTED WITH DEPTH POINTS:

The check-error instruction takes a register containing a function to be 
'error checked' and a string literal that's the readable representation of
the expression to be error checked. 

TRANSLATION:
Top-level scheme syntax is (check-error e). 
This K-normalizes to 
(let ([r0 (lambda () (k-normalize e))]) 
     (check-error r0 stringify-e))

Which generates the assembly:

r0 := function (0 arguments) {
  body-of-e-as-vs
  return r0
}
check-error stringify-e r0

This is observed in knormalize.sml:170-173, and in all the places where
check-error has been added: in Vscheme/UnambiguousVscheme (vscheme.sml), 
FOScheme (foscheme.sml), KNF (knf.sml), and as a checky primitive in 
primitives.sml. 

SEMANTICS:

We begin in vmerror.c, where we initialize a jmp_buf testbuf, and describe
abstract handlers with NHANDLERS. Now, all the error functions will jump 
to the buffer if there's a handler installed (NHANDLERS > 0). Otherwise, 
they'll just print and abort. We expose NHANDLERS in vmerror.h. 

Moving on to check-expect.c/h, we've added API calls to add a test, pass a test,
and fail a check-error test: 
add_test() 
pass_test();
fail_check_error();

These are used in the main attaction, in vmrun.c:115-165. Here, we push our 
special 'error frame' with dest_reg_idx as a NEGATIVE index into the literal 
pool (we'll make it positive when we use it; it being negative is to identify
an error frame). We then install an abstract handler, set_jmp our jmp_buf, 
and execute the function in rX in 'error mode.'

If we error out during this function, we'll jump back, restore the frame, 
and pass the test using our new API. 

If we return from an error frame- see vmrun.c:396-405- we'll fail our test, 
printing out a fail message accessed by the negative literal slot. 

TESTS: Several can be found in the `tests` directory I submitted with module 9.
       All the files are fine; some of the .1s don't have the right output
       since I updated the error messages. For convincing tests, I would look 
       at the check-errors in kntest.scm, which compile and run as expected, 
       as well as cherr.vs and cherr-special-overflow.vs in `tests`. Updated
       diffs are made and will be part of next week's submission.

Thanks! This one was super fun. Back to ANF and tail-recursion optimization.

---
unicode: I submitted this via Slack. Please let me know if you need anything 
         else. 

See you Thursday!