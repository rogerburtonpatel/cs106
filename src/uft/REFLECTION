1. To claim this point, submit a source tree in which make successfully builds a
UFT and an SVM, when run in directories src/uft and src/svm respectively.

> huzzah! 

2. To claim this point, take two useful case expressions with nested patterns,
either from your UFT or your 105 homework. In a file nested.scm, define
functions f and g that contain eScheme case expressions that use the same
patterns in the same order. Then define equivalent functions f-unnested and
g-unnested, each of which performs the computation using nested case
expressions—not nested patterns. Do not use if.

> nested.scm lives in svm/

The equivalence I wish to see is observational equivalence: two functions are
equivalent if no program can tell the difference.

3. To claim this point, use the case-viz script to visualize functions f and
f-unnested from the previous point. The visualization of f-unnested will contain
two or more decision trees. Splice them together either by drawing pictures or
by doctoring the nested.dot file. Compare the trees for the two files:

Do you expect nested case expressions to amount to the same decision tree as one
case expression with nested patterns? Or just an equivalent decision tree? Why
or why not?

> I expect them to be the same. We scrutinize each `P.APPLY,` and if there 
  are recursive APPLY's we scrutinize those in turn. Doing so implicity 
  (with nested patterns) or explicity (with case) should yield the same results.

  (turns out I was wrong! And I learned from it- our algorithm expands nested
   patterns, not nested trees!)

Explain whether the trees produced by your match compiler do or do not meet your
expectations.

> The trees DID appear different- in the unnested version, we just get a 
  fat MATCH node at the bottom of the tree that comprises the nested case 
  statement. But I think you can build the original, nested-pattern tree using 
  the two nested case trees. 
  
  The results appear different because in the nested-pattern tree, we just do 
  our typical recursive traversal: examine a constructor, and then its nested 
  patterns; if they're constructors, make more decision splits based on those.

  In the nested case, however, we have to make a match node with the whole 
  internal case statement, because that ISN'T a nested constructor we can 
  recurse on during decision-tree compilation: that's a whole new tree. 
  So we make another tree, and merging the two trees in a clever way can give 
  us the same traversal as the nested-pattern tree. So we get equivalent trees.

4. To claim this point, submit a file nomatch.scm which evaluates a case
expression in which no choice matches. Your submission earns the point if the
code compiles and runs with your UFT and SVM, producing a suitable run-time
error message.

> nomatch.scm lives in svm/

5. In ML, the type of each scrutinee is known, and that type is associated with
a finite, known set of value constructors. Explain the consequences for match
compilation. Illustrate your explanation with the standard map function: how
would it be compiled for eScheme, and how would it be compiled for ML? What is
the key difference?

> Each value constructor in the aforementioned ML set has a single valid arity, 
  and indeed is a truly unique value. Therefore, it can be coded as an integer
  offset into a jump table for a computed goto. This coding is safe because 
  each constructor is guaranteed by the type system to be completely different
  from all the others. 

  In eScheme, this isn't the case: a constructor can have any arity, and we 
  have to use a key-value pair based jump table, where the keys are the 
  constructors/arities, and the values are the chunks of code we execute 
  if we match the key (the values are marked by labels, rather than being
  raw addresses from jump registers in a compiled ML jump table). 

  We can see this in `map`:

  r0 := function ( 2 arguments ) {
  switch r2 {
    case emptylist (0): goto L1
    case "cons" (2): goto L2
  }
  r0 := "no-matching-case"
  error r0
  return r0
  L1:
  r0 := emptylist
  return r0
  L2:
  r3 := block r2 < 1 >
  r4 := block r2 < 2 >
  r6 := r1
  r7 := r3
  r6 := call r6 ( r7 )
  r7 := _G[ "map" ]
  r8 := r1
  r9 := r4
  r7 := call r7 ( r8 - r9 )
  r5 := r6 cons r7
  return r5
}
_G[ "map" ] := r0

  On lines 81/82, we're doing our key-value checking, which is linear in 
  time complexity (we need to examine each possible constructor and arity
  against the scrutinee). A jump table from compiled ML would be O(1), because
  we just compute the offset based on the constructor and go to the matching
  address. 

  If we compiled ML's map, we'd get a read-only array of size 2: one slot 
  for emptylist and one for cons. Each slot would hold an address that points to
  code to execute next: effectively, "L1" and "L2" 's code in the compiled 
  eScheme. 

  The key difference is that the ML type system guarantees value constructors 
  are unique, and so we can encode them as integers to use in a speedy O(1)
  computed goto. In eScheme, we don't have this guarantee, so we need to 
  check each possible constructor/arity until we find a match (or don't). 

6. In steps 12 and 17, I’ve encouraged you to special-case representations of
Booleans and lists. But in the μML interpreter, Booleans and lists are
predefined, not primitive, and they use the same representations as all other
constructed data. To claim this point, suppose you wished to implement the same
plan in your own system. Identify the code that would have to change in vmrun.c,
value.h, and value.c.

> We wouldn't have unique Boolean or ConsCell values in value.h; rather, they'd
  just be Blocks where the first slot is "bool" or "cons". Therefore, we 
  couldn't check the tags in our AS_BOOL or AS_CONS functions- we'd have to 
  check if it was a Block, and then look at its first slot, then the rest
  if we have a string match on "bool" or "cons". We'd also have to change 
  mkBooleanValue and mkConsValue to build special Blocks with the right 
  internals. The same issue of not being able to check tags applies to the 
  EmptyList value, as well. 

  In value.c, we'd have to change identical to no longer examine the .b of a 
  boolean (which doesn't exist anymore), and instead look the block pointers
  like in Block or ConsCell at value.c:30/31. We'd have to change eqvalue: 
  again, no more .b for bools; we'll be looking at internal block values. 
  eqtests wouldn't be able to do a ConsCell special case check via the tag;
  we'd have to examine it as a Block and do the recursion only if it's a block
  where the first slot is "cons". 
  There's no more Value emptylist = { EmptyList }; now we have a special 
  cons block with no slots beyond the (named) first. 

  In vmrun.c, we'd have to change BoolOf to allocate a block and set its 
  boolean internals. 
  IsPair, isNull, and IsBoolean couldn't check tags anymore. 
  Cons construction would have to make a block where the first slot is "cons",
  the second is the car, and the third is the cdr. 
  GetBlockSlot would have to check block internals rather than the ConsCell tag.
  Likewise with GotoVcon, which wouldn't be able to 'pattern-match' on 
  an explicit ConsCell any more; it will be seeking a Block with "cons" at 
  slot 0. 


7. In steps 12 and 17, I’ve encouraged you to special-case representations of
Booleans and lists. But in the μML interpreter, Booleans and lists are
predefined, not primitive, and they use the same representations as all other
constructed data. To claim this point, suppose you wished to implement the same
plan in your own system. Identify the code that would have to change in your
K-normalizer, your code generator, and your disambiguator.

> We wouldn't have the special cases in knormalize.sml:182-188 to break down
  constructed booleans and lists: now we just keep them as constructed data.

  codegen.sml:80-82- we don't generate unique object code for constructed 
  booleans/emptylist any more. We just let the "bool" and "cons" forms fall
  through to the (name, _) case at codegen.sml:89.

8. To claim this point, copy fig6.scm into file fig6-extended.scm, and add
check-expect tests that call function figure-6 expecting results 'one, 'three,
and 'four. Your system earns the point if the code compiles and all the tests
pass.

> fig6-extended.scm lives in svm/

9. To claim this point, submit an implementation of GotoVcon that searches the
jump table and chooses a target address, without returning to the main
interpreter loop.

> This was a great learning moment on when to NOT reuse code! It seems like 
  you should just go back to vmrun, but leaning on the structural invariant 
  of having a set number of ifVconMatch/goto pairs leads to more efficient,
  "decode-less" code. 