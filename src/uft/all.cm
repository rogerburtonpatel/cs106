group is
  $/basis.cm

  (***** basic infrastructure *****)

  impossible.cm   (* analog of assertion failure *)
  escapes.sml     (* character escapes for string literals *)

  env.sml         (* environment abstraction *)
  set.sml         (* set abstraction *)
  ioutil.sml      (* convenience functions for I/O *)

  (***** all the languages we'll eventually translate ****)

  languages.sml   (* the languages, their names, mnemonic descriptions *)


  (***** ASSEMBLY LANGUAGE and OBJECT CODE ********)

  (* representations of assembly code and object code *)

  object-code.sml  (* virtual object code: internal form and an unparser *)
  asm.sml          (* SVM assembly language, internal form only *)


  (* error monad *)

  error-sig.sml
  error-module.sml

  (* "producer" interface [parsing combinators] *)

  producer-sig.sml
  producer-functor.sml


  asmlex.sml     (* lexer for assembly code, provided with module 3 *)
  indentlex.sml  (* lexer that handles significant indentation, python style *)
  asmparse.sml   (* assembly parser, built in modules 3 & 4, template provided *)
  assembler.sml  (* Assembler, built in module 4, not provided *)


  (******* vScheme and its infrastructure ****)

  primitives.sml   (* given to students; properties of primitives *)

  vscheme.sml   (* vscheme and utilities; given to students *)

  pp.cm              (* vscheme prettyprinter, with infrastructure; given to students *)
  wpp.cm             (* [prettyprinter used to disambiguate check-expect] *)
  ppwrapper.sml
  wppscheme.sml

  disambiguate.sml  (* vscheme disambiguation; completed by students *)

  sxlex.sml          (* vscheme parser (and S-expressions); given to students *)
  sx.sml
  vscheme-parse.sml



  (******* K-NORMAL FORM ********)


  knf.sml       (* completed by students *)

  knembed.sml       (* embedding and projection; completed by students *)
  knproject.sml

  (******* A-NORMAL FORM ********)


  anf.sml      

  anembed.sml      
  anproject.sml
  anrename.sml




  (********** CODE GENERATION ******)

  asmutil.sml       (* convenience functions to generate assembly code *)
  codegen.sml       (* translate KNF to assembly (written by students) *)

  knrename.sml      (* convert names to registers in KNF (for testing) *)


  (************ K-NORMALIZATION ***************)

  foscheme.sml      (* source language "first-order Scheme" *)
  foutil.sml        (* embedding/projection for foscheme <-> vscheme *)

  clscheme.sml       (* first-order scheme plus closure forms *)

  knormalize.sml    (* K-normalizer *)
     (* translates foscheme in module 9, then clscheme in module 10 *)



  (********* CLOSURE CONVERSION: Module 10 *****)

  closure-convert.sml   (* closure conversion: you implement *)
  foclutil.sml          (* embed First-Order Scheme into Closed Scheme *) 
  mutability.sml        (* detect and repair mutable vars in closures *)


  (*********** UNIVERSAL FORWARD TRANSLATOR **********)
  uft.sml
