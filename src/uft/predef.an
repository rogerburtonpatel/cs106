(let ([r0 (lambda (r1) (let ([r2 (car r1)]) (car r2)))]) (set caar r0))
(let ([r0 (lambda (r1) (let ([r2 (cdr r1)]) (car r2)))]) (set cadr r0))
(let ([r0 (lambda (r1) (let ([r2 (car r1)]) (cdr r2)))]) (set cdar r0))
(let ([r0 (lambda (r1) (let ([r2 (cdr r1)]) (cdr r2)))]) (set cddr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 caar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set caaar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cadr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set caadr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cdar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set cadar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cddr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set caddr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 caar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cdaar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cadr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cdadr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cdar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cddar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cddr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cdddr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 caaar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set caaaar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 caadr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set caaadr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cadar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set caadar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 caddr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set caaddr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cdaar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set cadaar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cdadr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set cadadr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cddar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set caddar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cdddr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (car r4)))]) 
  (set cadddr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 caaar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cdaaar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 caadr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cdaadr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cadar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cdadar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 caddr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cdaddr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cdaar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cddaar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cdadr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cddadr r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cddar]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cdddar r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cdddr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]
                    [r4 (r4 r5)]) 
               (cdr r4)))]) 
  (set cddddr r0))
(let ([r0 (lambda (r1) (let ([r2 '()]) (cons r1 r2)))]) (set list1 r0))
(let ([r0 (lambda (r1 r2) 
             (let* ([r3 list1]
                    [r4 r2]
                    [r5 r3]
                    [r6 r4]
                    [r5 (r5 r6)]) 
               (cons r1 r5)))]) 
  (set list2 r0))
(let ([r0 (lambda (r1 r2 r3) 
             (let* ([r4 list2]
                    [r5 r2]
                    [r6 r3]
                    [r7 r4]
                    [r8 r5]
                    [r9 r6]
                    [r7 (r7 r8 r9)]) 
               (cons r1 r7)))]) 
  (set list3 r0))
(let ([r0 (lambda (r1 r2) 
             (let ([r3 (null? r1)]) 
               (if r3 
                  r2 
                  (let* ([r4 (car r1)]
                         [r5 append]
                         [r6 (cdr r1)]
                         [r7 r2]
                         [r8 r5]
                         [r9 r6]
                         [r10 r7]
                         [r8 (r8 r9 r10)]) 
                    (cons r4 r8)))))]) 
  (set append r0))
(let ([r0 (lambda (r1 r2) 
             (let ([r3 (null? r1)]) 
               (if r3 
                  r2 
                  (let* ([r4 revapp]
                         [r5 (cdr r1)]
                         [r6 (car r1)]
                         [r7 (cons r6 r2)]
                         [r8 r4]
                         [r9 r5]
                         [r10 r7]) 
                    (r8 r9 r10)))))]) 
  (set revapp r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 revapp]
                    [r3 r1]
                    [r4 '()]
                    [r5 r2]
                    [r6 r3]
                    [r7 r4]) 
               (r5 r6 r7)))]) 
  (set reverse r0))
(let ([r0 (lambda (r1 r2) 
             (let* ([r3 0]
                    [r4 (= r1 r3)]) 
               (if r4 
                  (car r2) 
                  (let* ([r5 nth]
                         [r6 1]
                         [r7 (- r1 r6)]
                         [r8 (cdr r2)]
                         [r9 r5]
                         [r10 r7]
                         [r11 r8]) 
                    (r9 r10 r11)))))]) 
  (set nth r0))
(let ([r0 (lambda (r1 r2) 
             (let* ([r3 nth]
                    [r4 1]
                    [r5 (+ r1 r4)]
                    [r6 r2]
                    [r7 r3]
                    [r8 r5]
                    [r9 r6]) 
               (r7 r8 r9)))]) 
  (set CAPTURED-IN r0))
(let ([r0 (lambda (r1 r2) (if r1 r2 r1))]) (set and r0))
(let ([r0 (lambda (r1 r2) (if r1 r1 r2))]) (set or r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 or]
                    [r3 (symbol? r1)]
                    [r4 or]
                    [r5 (number? r1)]
                    [r6 or]
                    [r7 (boolean? r1)]
                    [r8 (null? r1)]
                    [r9 r6]
                    [r10 r7]
                    [r11 r8]
                    [r9 (r9 r10 r11)]
                    [r10 r4]
                    [r11 r5]
                    [r12 r9]
                    [r10 (r10 r11 r12)]
                    [r11 r2]
                    [r12 r3]
                    [r13 r10]) 
               (r11 r12 r13)))]) 
  (set atom? r0))
(let ([r0 (lambda (r1 r2) 
             (let* ([r3 atom?]
                    [r4 r1]
                    [r5 r3]
                    [r6 r4]
                    [r5 (r5 r6)]) 
               (if r5 
                  (= r1 r2) 
                  (let* ([r6 atom?]
                         [r7 r2]
                         [r8 r6]
                         [r9 r7]
                         [r8 (r8 r9)]) 
                    (if r8 
                       #f 
                       (let* ([r9 and]
                              [r10 equal?]
                              [r11 (car r1)]
                              [r12 (car r2)]
                              [r13 r10]
                              [r14 r11]
                              [r15 r12]
                              [r13 (r13 r14 r15)]
                              [r14 equal?]
                              [r15 (cdr r1)]
                              [r16 (cdr r2)]
                              [r17 r14]
                              [r18 r15]
                              [r19 r16]
                              [r17 (r17 r18 r19)]
                              [r18 r9]
                              [r19 r13]
                              [r20 r17]) 
                         (r18 r19 r20)))))))]) 
  (set equal? r0))
(let ([r0 (lambda (r1 r2) 
             (let* ([r3 list2]
                    [r4 r1]
                    [r5 r2]
                    [r6 r3]
                    [r7 r4]
                    [r8 r5]) 
               (r6 r7 r8)))]) 
  (set make-alist-pair r0))
(let ([r0 (lambda (r1) (car r1))]) (set alist-pair-key r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 cadr]
                    [r3 r1]
                    [r4 r2]
                    [r5 r3]) 
               (r4 r5)))]) 
  (set alist-pair-attribute r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 alist-pair-key]
                    [r3 (car r1)]
                    [r4 r2]
                    [r5 r3]) 
               (r4 r5)))]) 
  (set alist-first-key r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 alist-pair-attribute]
                    [r3 (car r1)]
                    [r4 r2]
                    [r5 r3]) 
               (r4 r5)))]) 
  (set alist-first-attribute r0))
(let ([r0 (lambda (r1 r2 r3) 
             (let ([r4 (null? r3)]) 
               (if r4 
                  (let* ([r5 list1]
                         [r6 make-alist-pair]
                         [r7 r1]
                         [r8 r2]
                         [r9 r6]
                         [r10 r7]
                         [r11 r8]
                         [r9 (r9 r10 r11)]
                         [r10 r5]
                         [r11 r9]) 
                    (r10 r11)) 
                  (let* ([r5 equal?]
                         [r6 r1]
                         [r7 alist-first-key]
                         [r8 r3]
                         [r9 r7]
                         [r10 r8]
                         [r9 (r9 r10)]
                         [r10 r5]
                         [r11 r6]
                         [r12 r9]
                         [r10 (r10 r11 r12)]) 
                    (if r10 
                       (let* ([r11 make-alist-pair]
                              [r12 r1]
                              [r13 r2]
                              [r14 r11]
                              [r15 r12]
                              [r16 r13]
                              [r14 (r14 r15 r16)]
                              [r15 (cdr r3)]) 
                         (cons r14 r15)) 
                       (let* ([r11 (car r3)]
                              [r12 bind]
                              [r13 r1]
                              [r14 r2]
                              [r15 (cdr r3)]
                              [r16 r12]
                              [r17 r13]
                              [r18 r14]
                              [r19 r15]
                              [r16 (r16 r17 r18 r19)]) 
                         (cons r11 r16)))))))]) 
  (set bind r0))
(let ([r0 (lambda (r1 r2) 
             (let ([r3 (null? r2)]) 
               (if r3 
                  '() 
                  (let* ([r4 equal?]
                         [r5 r1]
                         [r6 alist-first-key]
                         [r7 r2]
                         [r8 r6]
                         [r9 r7]
                         [r8 (r8 r9)]
                         [r9 r4]
                         [r10 r5]
                         [r11 r8]
                         [r9 (r9 r10 r11)]) 
                    (if r9 
                       (let* ([r10 alist-first-attribute]
                              [r11 r2]
                              [r12 r10]
                              [r13 r11]) 
                         (r12 r13)) 
                       (let* ([r10 find]
                              [r11 r1]
                              [r12 (cdr r2)]
                              [r13 r10]
                              [r14 r11]
                              [r15 r12]) 
                         (r13 r14 r15)))))))]) 
  (set find r0))
(let ([r0 (lambda (r1 r2) 
             (let* ([r3 (lambda (r1 r2) 
                           (let* ([r3 CAPTURED-IN]
                                  [r4 1]
                                  [r5 r1]
                                  [r3 (r3 r4 r5)]
                                  [r4 CAPTURED-IN]
                                  [r5 0]
                                  [r6 r1]
                                  [r4 (r4 r5 r6)]
                                  [r5 r2]
                                  [r6 r4]
                                  [r7 r5]
                                  [r6 (r6 r7)]
                                  [r7 r3]
                                  [r8 r6]) 
                             (r7 r8)))]
                    [r4 '()]
                    [r4 (cons r1 r4)]
                    [r4 (cons r2 r4)]
                    [r3 (mkclosure r3 r4)]) 
               (set r3 r3)))]) 
  (set o r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 (lambda (r1 r2) 
                           (let* ([r3 CAPTURED-IN]
                                  [r4 0]
                                  [r5 r1]
                                  [r3 (r3 r4 r5)]
                                  [r4 (lambda (r1 r2) 
                                         (let* ([r4 CAPTURED-IN]
                                                [r5 1]
                                                [r6 r1]
                                                [r4 (r4 r5 r6)]
                                                [r5 CAPTURED-IN]
                                                [r6 0]
                                                [r7 r1]
                                                [r5 (r5 r6 r7)]
                                                [r6 r2]
                                                [r7 r4]
                                                [r8 r5]
                                                [r9 r6]) 
                                           (r7 r8 r9)))]
                                  [r5 '()]
                                  [r5 (cons r3 r5)]
                                  [r5 (cons r2 r5)]
                                  [r3 (mkclosure r4 r5)]) 
                             (set r3 r3)))]
                    [r3 '()]
                    [r3 (cons r1 r3)]
                    [r2 (mkclosure r2 r3)]) 
               (set r2 r2)))]) 
  (set curry r0))
(let ([r0 (lambda (r1) 
             (let* ([r2 (lambda (r1 r2 r3) 
                           (let* ([r4 CAPTURED-IN]
                                  [r5 0]
                                  [r6 r1]
                                  [r4 (r4 r5 r6)]
                                  [r5 r2]
                                  [r6 r4]
                                  [r7 r5]
                                  [r6 (r6 r7)]
                                  [r7 r3]
                                  [r8 r6]
                                  [r9 r7]) 
                             (r8 r9)))]
                    [r3 '()]
                    [r3 (cons r1 r3)]
                    [r2 (mkclosure r2 r3)]) 
               (set r2 r2)))]) 
  (set uncurry r0))
(let ([r0 (lambda (r1 r2) 
             (let ([r3 (null? r2)]) 
               (if r3 
                  '() 
                  (let* ([r4 r1]
                         [r5 (car r2)]
                         [r6 r4]
                         [r7 r5]
                         [r6 (r6 r7)]) 
                    (if r6 
                       (let* ([r7 (car r2)]
                              [r8 filter]
                              [r9 r1]
                              [r10 (cdr r2)]
                              [r11 r8]
                              [r12 r9]
                              [r13 r10]
                              [r11 (r11 r12 r13)]) 
                         (cons r7 r11)) 
                       (let* ([r7 filter]
                              [r8 r1]
                              [r9 (cdr r2)]
                              [r10 r7]
                              [r11 r8]
                              [r12 r9]) 
                         (r10 r11 r12)))))))]) 
  (set filter r0))
(let ([r0 (lambda (r1 r2) 
             (let ([r3 (null? r2)]) 
               (if r3 
                  '() 
                  (let* ([r4 r1]
                         [r5 (car r2)]
                         [r6 r4]
                         [r7 r5]
                         [r6 (r6 r7)]
                         [r7 map]
                         [r8 r1]
                         [r9 (cdr r2)]
                         [r10 r7]
                         [r11 r8]
                         [r12 r9]
                         [r10 (r10 r11 r12)]) 
                    (cons r6 r10)))))]) 
  (set map r0))
(let ([r0 (lambda (r1 r2) 
             (let ([r3 (null? r2)]) 
               (if r3 
                  #f 
                  (begin 
                     (let* ([r4 r1]
                            [r5 (car r2)]
                            [r6 r4]
                            [r7 r5]) 
                       (r6 r7)) 
                     (let* ([r4 app]
                            [r5 r1]
                            [r6 (cdr r2)]
                            [r7 r4]
                            [r8 r5]
                            [r9 r6]) 
                       (r7 r8 r9))))))]) 
  (set app r0))
(let ([r0 (lambda (r1 r2) 
             (let ([r3 (null? r2)]) 
               (if r3 
                  #f 
                  (let* ([r4 r1]
                         [r5 (car r2)]
                         [r6 r4]
                         [r7 r5]
                         [r6 (r6 r7)]) 
                    (if r6 
                       #t 
                       (let* ([r7 exists?]
                              [r8 r1]
                              [r9 (cdr r2)]
                              [r10 r7]
                              [r11 r8]
                              [r12 r9]) 
                         (r10 r11 r12)))))))]) 
  (set exists? r0))
(let ([r0 (lambda (r1 r2) 
             (let ([r3 (null? r2)]) 
               (if r3 
                  #t 
                  (let* ([r4 r1]
                         [r5 (car r2)]
                         [r6 r4]
                         [r7 r5]
                         [r6 (r6 r7)]) 
                    (if r6 
                       (let* ([r7 all?]
                              [r8 r1]
                              [r9 (cdr r2)]
                              [r10 r7]
                              [r11 r8]
                              [r12 r9]) 
                         (r10 r11 r12)) 
                       #f)))))]) 
  (set all? r0))
(let ([r0 (lambda (r1 r2 r3) 
             (let ([r4 (null? r3)]) 
               (if r4 
                  r2 
                  (let* ([r5 r1]
                         [r6 (car r3)]
                         [r7 foldr]
                         [r8 r1]
                         [r9 r2]
                         [r10 (cdr r3)]
                         [r11 r7]
                         [r12 r8]
                         [r13 r9]
                         [r14 r10]
                         [r11 (r11 r12 r13 r14)]
                         [r12 r5]
                         [r13 r6]
                         [r14 r11]) 
                    (r12 r13 r14)))))]) 
  (set foldr r0))
(let ([r0 (lambda (r1 r2 r3) 
             (let ([r4 (null? r3)]) 
               (if r4 
                  r2 
                  (let* ([r5 foldl]
                         [r6 r1]
                         [r7 r1]
                         [r8 (car r3)]
                         [r9 r2]
                         [r10 r7]
                         [r11 r8]
                         [r12 r9]
                         [r10 (r10 r11 r12)]
                         [r11 (cdr r3)]
                         [r12 r5]
                         [r13 r6]
                         [r14 r10]
                         [r15 r11]) 
                    (r12 r13 r14 r15)))))]) 
  (set foldl r0))
(let ([r0 10]) (set newline r0))
(let ([r0 40]) (set left-round r0))
(let ([r0 32]) (set space r0))
(let ([r0 41]) (set right-round r0))
(let ([r0 59]) (set semicolon r0))
(let ([r0 123]) (set left-curly r0))
(let ([r0 39]) (set quotemark r0))
(let ([r0 125]) (set right-curly r0))
(let ([r0 91]) (set left-square r0))
(let ([r0 93]) (set right-square r0))
(let ([r0 (lambda (r1 r2) (let ([r3 (= r1 r2)]) (not r3)))]) 
  (set != r0))
(let ([r0 (lambda (r1 r2) (let ([r3 (> r1 r2)]) (if r3 r1 r2)))]) 
  (set max r0))
(let ([r0 (lambda (r1 r2) (let ([r3 (< r1 r2)]) (if r3 r1 r2)))]) 
  (set min r0))
(let ([r0 (lambda (r1) (let ([r2 0]) (- r2 r1)))]) (set negated r0))
(let ([r0 (lambda (r1 r2) 
             (let* ([r3 0]
                    [r4 (= r2 r3)]) 
               (if r4 
                  r1 
                  (let* ([r5 gcd]
                         [r6 r2]
                         [r7 (mod r1 r2)]
                         [r8 r5]
                         [r9 r6]
                         [r10 r7]) 
                    (r8 r9 r10)))))]) 
  (set gcd r0))
(let ([r0 (lambda (r1 r2) 
             (let* ([r3 0]
                    [r4 (= r1 r3)]) 
               (if r4 
                  0 
                  (let* ([r5 gcd]
                         [r6 r1]
                         [r7 r2]
                         [r8 r5]
                         [r9 r6]
                         [r10 r7]
                         [r8 (r8 r9 r10)]
                         [r9 (idiv r2 r8)]) 
                    (* r1 r9)))))]) 
  (set lcm r0))
(let ([r0 (lambda (r1 r2 r3 r4) 
             (let* ([r5 list3]
                    [r6 r2]
                    [r7 r3]
                    [r8 r4]
                    [r9 r5]
                    [r10 r6]
                    [r11 r7]
                    [r12 r8]
                    [r9 (r9 r10 r11 r12)]) 
               (cons r1 r9)))]) 
  (set list4 r0))
(let ([r0 (lambda (r1 r2 r3 r4 r5) 
             (let* ([r6 list4]
                    [r7 r2]
                    [r8 r3]
                    [r9 r4]
                    [r10 r5]
                    [r11 r6]
                    [r12 r7]
                    [r13 r8]
                    [r14 r9]
                    [r15 r10]
                    [r11 (r11 r12 r13 r14 r15)]) 
               (cons r1 r11)))]) 
  (set list5 r0))
(let ([r0 (lambda (r1 r2 r3 r4 r5 r6) 
             (let* ([r7 list5]
                    [r8 r2]
                    [r9 r3]
                    [r10 r4]
                    [r11 r5]
                    [r12 r6]
                    [r13 r7]
                    [r14 r8]
                    [r15 r9]
                    [r16 r10]
                    [r17 r11]
                    [r18 r12]
                    [r13 (r13 r14 r15 r16 r17 r18)]) 
               (cons r1 r13)))]) 
  (set list6 r0))
(let ([r0 (lambda (r1 r2 r3 r4 r5 r6 r7) 
             (let* ([r8 list6]
                    [r9 r2]
                    [r10 r3]
                    [r11 r4]
                    [r12 r5]
                    [r13 r6]
                    [r14 r7]
                    [r15 r8]
                    [r16 r9]
                    [r17 r10]
                    [r18 r11]
                    [r19 r12]
                    [r20 r13]
                    [r21 r14]
                    [r15 (r15 r16 r17 r18 r19 r20 r21)]) 
               (cons r1 r15)))]) 
  (set list7 r0))
(let ([r0 (lambda (r1 r2 r3 r4 r5 r6 r7 r8) 
             (let* ([r9 list7]
                    [r10 r2]
                    [r11 r3]
                    [r12 r4]
                    [r13 r5]
                    [r14 r6]
                    [r15 r7]
                    [r16 r8]
                    [r17 r9]
                    [r18 r10]
                    [r19 r11]
                    [r20 r12]
                    [r21 r13]
                    [r22 r14]
                    [r23 r15]
                    [r24 r16]
                    [r17 (r17 r18 r19 r20 r21 r22 r23 r24)]) 
               (cons r1 r17)))]) 
  (set list8 r0))
(let ([r0 (lambda (r1 r2) 
             (let ([r3 (null? r2)]) 
               (if r3 
                  #f 
                  (let* ([r4 (car r2)]
                         [r5 (cdr r2)]
                         [r6 equal?]
                         [r7 r1]
                         [r8 (car r4)]
                         [r9 r6]
                         [r10 r7]
                         [r11 r8]
                         [r9 (r9 r10 r11)]) 
                    (if r9 
                       r4 
                       (let* ([r10 assoc]
                              [r11 r1]
                              [r12 r5]
                              [r13 r10]
                              [r14 r11]
                              [r15 r12]) 
                         (r13 r14 r15)))))))]) 
  (set assoc r0))
(let ([r0 (lambda () 
             (let* ([r1 nil]
                    [r2 '()]) 
               (cons r1 r2)))]) 
  (set Table.new r0))
(let ([r0 (lambda (r1 r2) 
             (let* ([r3 assoc]
                    [r4 r2]
                    [r5 (cdr r1)]
                    [r6 r3]
                    [r7 r4]
                    [r8 r5]
                    [r6 (r6 r7 r8)]) 
               (if r6 (cdr r6) nil)))]) 
  (set Table.get r0))
(let ([r0 (lambda (r1 r2 r3) 
             (let* ([r4 assoc]
                    [r5 r2]
                    [r6 (cdr r1)]
                    [r7 r4]
                    [r8 r5]
                    [r9 r6]
                    [r7 (r7 r8 r9)]) 
               (if r7 
                  (let* ([r8 set-cdr!]
                         [r9 r7]
                         [r10 r3]
                         [r11 r8]
                         [r12 r9]
                         [r13 r10]) 
                    (r11 r12 r13)) 
                  (let* ([r8 set-cdr!]
                         [r9 r1]
                         [r10 (cons r2 r3)]
                         [r11 (cdr r1)]
                         [r12 (cons r10 r11)]
                         [r13 r8]
                         [r14 r9]
                         [r15 r12]) 
                    (r13 r14 r15)))))]) 
  (set Table.put r0))
